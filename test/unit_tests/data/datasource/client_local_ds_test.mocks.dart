// Mocks generated by Mockito 5.4.2 from annotations
// in test_app/test/unit_tests/data/datasource/client_local_ds_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:test_app/core/cache/db.dart' as _i2;
import 'package:test_app/data/datasources/local/client_local_ds.dart' as _i3;
import 'package:test_app/domain/entities/cliententity.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocalDatabase_0 extends _i1.SmartFake implements _i2.LocalDatabase {
  _FakeLocalDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClient_1 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ClientCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockClientCache extends _i1.Mock implements _i3.ClientCache {
  @override
  _i2.LocalDatabase get localDatabase => (super.noSuchMethod(
        Invocation.getter(#localDatabase),
        returnValue: _FakeLocalDatabase_0(
          this,
          Invocation.getter(#localDatabase),
        ),
        returnValueForMissingStub: _FakeLocalDatabase_0(
          this,
          Invocation.getter(#localDatabase),
        ),
      ) as _i2.LocalDatabase);
  @override
  set localDatabase(_i2.LocalDatabase? _localDatabase) => super.noSuchMethod(
        Invocation.setter(
          #localDatabase,
          _localDatabase,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<int> addClient(_i5.ClientEntity? client) => (super.noSuchMethod(
        Invocation.method(
          #addClient,
          [client],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<List<_i2.Client>> getAllClients() => (super.noSuchMethod(
        Invocation.method(
          #getAllClients,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Client>>.value(<_i2.Client>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.Client>>.value(<_i2.Client>[]),
      ) as _i4.Future<List<_i2.Client>>);
  @override
  _i4.Future<_i2.Client> getClient(String? clientId) => (super.noSuchMethod(
        Invocation.method(
          #getClient,
          [clientId],
        ),
        returnValue: _i4.Future<_i2.Client>.value(_FakeClient_1(
          this,
          Invocation.method(
            #getClient,
            [clientId],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Client>.value(_FakeClient_1(
          this,
          Invocation.method(
            #getClient,
            [clientId],
          ),
        )),
      ) as _i4.Future<_i2.Client>);
  @override
  _i4.Future<int> removeClient(String? clientId) => (super.noSuchMethod(
        Invocation.method(
          #removeClient,
          [clientId],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<int> updateClient(_i5.ClientEntity? client) => (super.noSuchMethod(
        Invocation.method(
          #updateClient,
          [client],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}
